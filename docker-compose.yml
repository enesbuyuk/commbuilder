services:
  traefik:
    image: traefik:v3.4
    restart: unless-stopped
    ports:
      - "80:80"
      - "443:443"
      - "8080:8080"
    command:
      - "--log.level=DEBUG"
      - "--api=true"
      - "--providers.docker=true"
      - "--entryPoints.web.address=:80"
      - "--entryPoints.websecure.address=:443"

      - "--certificatesresolvers.myresolver.acme.dnschallenge=true"
      - "--certificatesresolvers.myresolver.acme.dnschallenge.provider=cloudflare"
      - "--certificatesresolvers.myresolver.acme.email=${ACME_EMAIL}"
      - "--certificatesresolvers.myresolver.acme.storage=/letsencrypt/acme.json"

      - "--certificatesresolvers.myresolver.acme.httpchallenge=false"
      - "--certificatesresolvers.myresolver.acme.tlschallenge=false"
    environment:
      - CF_DNS_API_TOKEN=${CF_DNS_API_TOKEN}
    labels:
      - "traefik.enable=true"
      - "traefik.http.routers.dashboard.rule=Host(`${TRAEFIK_DASHBOARD_HOSTNAME}`)"
      - "traefik.http.routers.dashboard.entrypoints=websecure"
      - "traefik.http.routers.dashboard.service=api@internal"
      - "traefik.http.routers.dashboard.tls=true"
      - "traefik.http.routers.dashboard.tls.certresolver=myresolver"
      - "traefik.http.routers.dashboard.middlewares=authtraefik"
      - "traefik.http.middlewares.authtraefik.basicauth.users=${TRAEFIK_DASHBOARD_USERNAME}:${TRAEFIK_DASHBOARD_PASSWORD}"
    volumes:
      - "/var/run/docker.sock:/var/run/docker.sock:ro"
      - "./letsencrypt:/letsencrypt"
    networks:
      - commbuilder-network

  commbuilder-backend:
    image: "commbuilder-backend:latest"
    env_file:
      - ./.env
    restart: always
    build:
      context: ./backend
      dockerfile: Dockerfile
    tty: true
    volumes:
      - ./backend:/app
    labels:
      - "traefik.enable=true"

      # HTTP Router
      - "traefik.http.routers.commbuilder-backend-http.rule=Host(`${BACKEND_HOSTNAME:-localhost}`)"
      - "traefik.http.routers.commbuilder-backend-http.entrypoints=web"
      - "traefik.http.routers.commbuilder-backend-http.middlewares=commbuilder-backend-redirect-to-https"

      # HTTPS Router
      - "traefik.http.routers.commbuilder-backend.rule=Host(`${BACKEND_HOSTNAME:-localhost}`)"
      - "traefik.http.routers.commbuilder-backend.entrypoints=websecure"
      - "traefik.http.routers.commbuilder-backend.service=commbuilder-backend"
      - "traefik.http.routers.commbuilder-backend.tls=true"
      - "traefik.http.routers.commbuilder-backend.tls.certresolver=myresolver"

      # Service
      - "traefik.http.services.commbuilder-backend.loadbalancer.server.port=${BACKEND_PORT}"
      - "traefik.http.services.commbuilder-backend.loadbalancer.passhostheader=true"

      # Middleware: HTTPS redirection
      - "traefik.http.middlewares.commbuilder-backend-redirect-to-https.redirectscheme.scheme=https"
      - "traefik.http.middlewares.commbuilder-backend-redirect-to-https.redirectscheme.permanent=true"

      # Middleware: Compression
      - "traefik.http.routers.commbuilder-backend.middlewares=commbuilder-backend-compress"
      - "traefik.http.middlewares.commbuilder-backend-compress.compress=true"
    depends_on:
      - traefik
      - mongodb
    networks:
      - commbuilder-network
    healthcheck:
      test: ["CMD", "sh", "-c", "curl -f http://localhost:${BACKEND_PORT}/livez || exit 1"]
      interval: 15s
      timeout: 5s
      retries: 4

  commbuilder-frontend:
    image: "commbuilder-frontend:latest"
    restart: always
    build:
      context: ./frontend
      dockerfile: Dockerfile
      args:
        NEXT_PUBLIC_SITE_URL: ${NEXT_PUBLIC_SITE_URL}
        NEXT_PUBLIC_MEDIUM_URL: ${NEXT_PUBLIC_MEDIUM_URL}
        NEXT_PUBLIC_BUCKET: ${NEXT_PUBLIC_BUCKET}
    environment:
      - BACKEND_URL=${BACKEND_URL}
      - BACKEND_API_TOKEN=${BACKEND_API_TOKEN}
      - PORT=${PORT}
    tty: true
    volumes:
      - ./frontend:/app
      - ./frontend/public:/public
    labels:
      - "traefik.enable=true"

      # HTTP Router
      - "traefik.http.routers.commbuilder-frontend-http.rule=Host(`${SITE_HOSTNAME:-localhost}`)"
      - "traefik.http.routers.commbuilder-frontend-http.entrypoints=web"
      - "traefik.http.routers.commbuilder-frontend-http.middlewares=commbuilder-frontend-redirect-to-https"

      # HTTPS Router
      - "traefik.http.routers.commbuilder-frontend.rule=Host(`${SITE_HOSTNAME:-localhost}`)"
      - "traefik.http.routers.commbuilder-frontend.entrypoints=websecure"
      - "traefik.http.routers.commbuilder-frontend.service=commbuilder-frontend"
      - "traefik.http.routers.commbuilder-frontend.tls=true"
      - "traefik.http.routers.commbuilder-frontend.tls.certresolver=myresolver"

      # Service
      - "traefik.http.services.commbuilder-frontend.loadbalancer.server.port=${PORT}"
      - "traefik.http.services.commbuilder-frontend.loadbalancer.passhostheader=true"

      # Middleware: HTTPS redirection
      - "traefik.http.middlewares.commbuilder-frontend-redirect-to-https.redirectscheme.scheme=https"
      - "traefik.http.middlewares.commbuilder-frontend-redirect-to-https.redirectscheme.permanent=true"

      # Middleware: Compression
      - "traefik.http.routers.commbuilder-frontend.middlewares=commbuilder-frontend-compress"
      - "traefik.http.middlewares.commbuilder-frontend-compress.compress=true"
    depends_on: 
      - commbuilder-backend
    networks:
      - commbuilder-network

  mongodb:
    image: mongo:8.0
    restart: unless-stopped
    environment:
      MONGO_INITDB_ROOT_USERNAME: "${MONGODB_USERNAME}"
      MONGO_INITDB_ROOT_PASSWORD: "${MONGODB_PASSWORD}"
    ports:
      - "27017:${MONGODB_PORT}"
    command: [ "mongod", "--bind_ip_all" ]
    volumes:
      - mongodb-data:/data/db
    networks:
      - commbuilder-network
    healthcheck:
      test: ["CMD", "mongosh", "--eval", "db.runCommand({ ping: 1 })"]
      interval: 10s
      timeout: 5s
      retries: 5

volumes:
  mongodb-data:
    driver: local

networks:
  commbuilder-network:
    driver: bridge
    name: commbuilder-network
    ### if you want to use your docker network
    #external: true
    #name: your-docker-network-name
