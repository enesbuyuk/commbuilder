services:
  backend:
    image: "student-club-web-backend:latest"
    container_name: "student-club-web-backend"
    environment:
      - BACKEND_PORT=${BACKEND_PORT}
      - JWT_SECRET=${JWT_SECRET}
      - MONGODB_HOST=${MONGODB_HOST}
      - MONGODB_PORT=${MONGODB_PORT}
      - MONGODB_USERNAME=${MONGODB_USERNAME}
      - MONGODB_PASSWORD=${MONGODB_PASSWORD}
      - MONGODB_DATABASE=${MONGODB_DATABASE}
    restart: always
    build:
      context: ./backend
      dockerfile: Dockerfile
    tty: true
    volumes:
      - ./backend:/app
    depends_on:
      mongodb:
        condition: service_healthy
    networks:
      - student-club-web-network
    healthcheck:
      test: ["CMD", "curl", "-f", "http://localhost:${BACKEND_PORT}/health"]
      interval: 10s
      timeout: 5s
      retries: 5

  frontend:
    image: "student-club-web-frontend:latest"
    container_name: "student-club-web-frontend"
    environment:
      - SITE_HOSTNAME=${SITE_HOSTNAME}
      - BACKEND_URL=${BACKEND_URL}
      - PORT=${PORT}
      - NEXT_PUBLIC_SITE_URL=${NEXT_PUBLIC_SITE_URL}
      - NEXT_PUBLIC_MEDIUM_URL=${NEXT_PUBLIC_MEDIUM_URL}
    restart: always
    build:
      context: ./frontend
      dockerfile: Dockerfile
    tty: true
    volumes:
      - ./frontend:/app
    labels:
      - "traefik.enable=true"
      - "traefik.http.routers.frontend.rule=Host(`${SITE_HOSTNAME:-localhost}`)"
      - "traefik.http.routers.frontend.entrypoints=web"
      - "traefik.http.services.frontend.loadbalancer.server.port=${PORT}"
    depends_on:
      - backend
    networks:
      - student-club-web-network

  mongodb:
    image: mongo:8.0
    restart: unless-stopped
    container_name: mongodb
    environment:
      MONGO_INITDB_ROOT_USERNAME: "${MONGODB_USERNAME}"
      MONGO_INITDB_ROOT_PASSWORD: "${MONGODB_PASSWORD}"
    ports:
      - "27017:${MONGODB_PORT}"
    command: [ "mongod", "--bind_ip_all" ]
    volumes:
      - mongodb-data:/data/db
    networks:
      - student-club-web-network
    healthcheck:
      test: ["CMD", "mongosh", "--eval", "db.runCommand({ ping: 1 })"]
      interval: 10s
      timeout: 5s
      retries: 5

volumes:
  mongodb-data:
    driver: local

networks:
  student-club-web-network:
    driver: bridge
